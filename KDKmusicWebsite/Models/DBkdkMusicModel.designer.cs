#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KDKmusicWebsite.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KDKMusic")]
	public partial class DBkdkMusicModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertInteraction(Interaction instance);
    partial void UpdateInteraction(Interaction instance);
    partial void DeleteInteraction(Interaction instance);
    partial void InsertMusic_Genre(Music_Genre instance);
    partial void UpdateMusic_Genre(Music_Genre instance);
    partial void DeleteMusic_Genre(Music_Genre instance);
    partial void InsertPlaylist(Playlist instance);
    partial void UpdatePlaylist(Playlist instance);
    partial void DeletePlaylist(Playlist instance);
    partial void InsertPlaylist_Song(Playlist_Song instance);
    partial void UpdatePlaylist_Song(Playlist_Song instance);
    partial void DeletePlaylist_Song(Playlist_Song instance);
    partial void InsertSong(Song instance);
    partial void UpdateSong(Song instance);
    partial void DeleteSong(Song instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
        #endregion

        public DBkdkMusicModelDataContext() : base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KDKMusicConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public DBkdkMusicModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBkdkMusicModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBkdkMusicModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBkdkMusicModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Interaction> Interactions
		{
			get
			{
				return this.GetTable<Interaction>();
			}
		}
		
		public System.Data.Linq.Table<Music_Genre> Music_Genres
		{
			get
			{
				return this.GetTable<Music_Genre>();
			}
		}
		
		public System.Data.Linq.Table<Playlist> Playlists
		{
			get
			{
				return this.GetTable<Playlist>();
			}
		}
		
		public System.Data.Linq.Table<Playlist_Song> Playlist_Songs
		{
			get
			{
				return this.GetTable<Playlist_Song>();
			}
		}
		
		public System.Data.Linq.Table<Song> Songs
		{
			get
			{
				return this.GetTable<Song>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private string _User_name;
		
		private string _Password;
		
		private string _E_mail;
		
		private string _FullName;
		
		private System.Nullable<bool> _is_Admin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnUser_nameChanging(string value);
    partial void OnUser_nameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void Onis_AdminChanging(System.Nullable<bool> value);
    partial void Onis_AdminChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_name", DbType="VarChar(100)")]
		public string User_name
		{
			get
			{
				return this._User_name;
			}
			set
			{
				if ((this._User_name != value))
				{
					this.OnUser_nameChanging(value);
					this.SendPropertyChanging();
					this._User_name = value;
					this.SendPropertyChanged("User_name");
					this.OnUser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_mail", DbType="VarChar(100)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_Admin", DbType="Bit")]
		public System.Nullable<bool> is_Admin
		{
			get
			{
				return this._is_Admin;
			}
			set
			{
				if ((this._is_Admin != value))
				{
					this.Onis_AdminChanging(value);
					this.SendPropertyChanging();
					this._is_Admin = value;
					this.SendPropertyChanged("is_Admin");
					this.Onis_AdminChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Albums")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Album_Id;
		
		private string _Album_Name;
		
		private System.Nullable<int> _Artist_Id;
		
		private EntitySet<Song> _Songs;
		
		private EntityRef<Artist> _Artist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbum_IdChanging(int value);
    partial void OnAlbum_IdChanged();
    partial void OnAlbum_NameChanging(string value);
    partial void OnAlbum_NameChanged();
    partial void OnArtist_IdChanging(System.Nullable<int> value);
    partial void OnArtist_IdChanged();
    #endregion
		
		public Album()
		{
			this._Songs = new EntitySet<Song>(new Action<Song>(this.attach_Songs), new Action<Song>(this.detach_Songs));
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Album_Id
		{
			get
			{
				return this._Album_Id;
			}
			set
			{
				if ((this._Album_Id != value))
				{
					this.OnAlbum_IdChanging(value);
					this.SendPropertyChanging();
					this._Album_Id = value;
					this.SendPropertyChanged("Album_Id");
					this.OnAlbum_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Name", DbType="NVarChar(100)")]
		public string Album_Name
		{
			get
			{
				return this._Album_Name;
			}
			set
			{
				if ((this._Album_Name != value))
				{
					this.OnAlbum_NameChanging(value);
					this.SendPropertyChanging();
					this._Album_Name = value;
					this.SendPropertyChanged("Album_Name");
					this.OnAlbum_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Id", DbType="Int")]
		public System.Nullable<int> Artist_Id
		{
			get
			{
				return this._Artist_Id;
			}
			set
			{
				if ((this._Artist_Id != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtist_IdChanging(value);
					this.SendPropertyChanging();
					this._Artist_Id = value;
					this.SendPropertyChanged("Artist_Id");
					this.OnArtist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Song", Storage="_Songs", ThisKey="Album_Id", OtherKey="Album_Id")]
		public EntitySet<Song> Songs
		{
			get
			{
				return this._Songs;
			}
			set
			{
				this._Songs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Artist", ThisKey="Artist_Id", OtherKey="Artist_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Albums.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Albums.Add(this);
						this._Artist_Id = value.Artist_Id;
					}
					else
					{
						this._Artist_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artist")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Artist_Id;
		
		private System.Nullable<int> _Country_Id;
		
		private string _Artist_Name;
		
		private System.Data.Linq.Binary _Artist_Image;
		
		private string _Artist_Info;
		
		private EntitySet<Album> _Albums;
		
		private EntitySet<Song> _Songs;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtist_IdChanging(int value);
    partial void OnArtist_IdChanged();
    partial void OnCountry_IdChanging(System.Nullable<int> value);
    partial void OnCountry_IdChanged();
    partial void OnArtist_NameChanging(string value);
    partial void OnArtist_NameChanged();
    partial void OnArtist_ImageChanging(System.Data.Linq.Binary value);
    partial void OnArtist_ImageChanged();
    partial void OnArtist_InfoChanging(string value);
    partial void OnArtist_InfoChanged();
    #endregion
		
		public Artist()
		{
			this._Albums = new EntitySet<Album>(new Action<Album>(this.attach_Albums), new Action<Album>(this.detach_Albums));
			this._Songs = new EntitySet<Song>(new Action<Song>(this.attach_Songs), new Action<Song>(this.detach_Songs));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Artist_Id
		{
			get
			{
				return this._Artist_Id;
			}
			set
			{
				if ((this._Artist_Id != value))
				{
					this.OnArtist_IdChanging(value);
					this.SendPropertyChanging();
					this._Artist_Id = value;
					this.SendPropertyChanged("Artist_Id");
					this.OnArtist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int")]
		public System.Nullable<int> Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Name", DbType="NVarChar(100)")]
		public string Artist_Name
		{
			get
			{
				return this._Artist_Name;
			}
			set
			{
				if ((this._Artist_Name != value))
				{
					this.OnArtist_NameChanging(value);
					this.SendPropertyChanging();
					this._Artist_Name = value;
					this.SendPropertyChanged("Artist_Name");
					this.OnArtist_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Image", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Artist_Image
		{
			get
			{
				return this._Artist_Image;
			}
			set
			{
				if ((this._Artist_Image != value))
				{
					this.OnArtist_ImageChanging(value);
					this.SendPropertyChanging();
					this._Artist_Image = value;
					this.SendPropertyChanged("Artist_Image");
					this.OnArtist_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Info", DbType="NVarChar(MAX)")]
		public string Artist_Info
		{
			get
			{
				return this._Artist_Info;
			}
			set
			{
				if ((this._Artist_Info != value))
				{
					this.OnArtist_InfoChanging(value);
					this.SendPropertyChanging();
					this._Artist_Info = value;
					this.SendPropertyChanged("Artist_Info");
					this.OnArtist_InfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Albums", ThisKey="Artist_Id", OtherKey="Artist_Id")]
		public EntitySet<Album> Albums
		{
			get
			{
				return this._Albums;
			}
			set
			{
				this._Albums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Song", Storage="_Songs", ThisKey="Artist_Id", OtherKey="Artist_Id")]
		public EntitySet<Song> Songs
		{
			get
			{
				return this._Songs;
			}
			set
			{
				this._Songs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Artist", Storage="_Country", ThisKey="Country_Id", OtherKey="Country_Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Artists.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Artists.Add(this);
						this._Country_Id = value.Country_Id;
					}
					else
					{
						this._Country_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Country_Id;
		
		private string _Country_Name;
		
		private EntitySet<Artist> _Artists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    partial void OnCountry_NameChanging(string value);
    partial void OnCountry_NameChanged();
    #endregion
		
		public Country()
		{
			this._Artists = new EntitySet<Artist>(new Action<Artist>(this.attach_Artists), new Action<Artist>(this.detach_Artists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Name", DbType="NVarChar(100)")]
		public string Country_Name
		{
			get
			{
				return this._Country_Name;
			}
			set
			{
				if ((this._Country_Name != value))
				{
					this.OnCountry_NameChanging(value);
					this.SendPropertyChanging();
					this._Country_Name = value;
					this.SendPropertyChanged("Country_Name");
					this.OnCountry_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Artist", Storage="_Artists", ThisKey="Country_Id", OtherKey="Country_Id")]
		public EntitySet<Artist> Artists
		{
			get
			{
				return this._Artists;
			}
			set
			{
				this._Artists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Interaction")]
	public partial class Interaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Interaction_Id;
		
		private System.Nullable<int> _Liked;
		
		private System.Nullable<long> _Play_Count;
		
		private System.Nullable<int> _User_Id;
		
		private System.Nullable<int> _Song_Id;
		
		private EntityRef<Song> _Song;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInteraction_IdChanging(long value);
    partial void OnInteraction_IdChanged();
    partial void OnLikedChanging(System.Nullable<int> value);
    partial void OnLikedChanged();
    partial void OnPlay_CountChanging(System.Nullable<long> value);
    partial void OnPlay_CountChanged();
    partial void OnUser_IdChanging(System.Nullable<int> value);
    partial void OnUser_IdChanged();
    partial void OnSong_IdChanging(System.Nullable<int> value);
    partial void OnSong_IdChanged();
    #endregion
		
		public Interaction()
		{
			this._Song = default(EntityRef<Song>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interaction_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Interaction_Id
		{
			get
			{
				return this._Interaction_Id;
			}
			set
			{
				if ((this._Interaction_Id != value))
				{
					this.OnInteraction_IdChanging(value);
					this.SendPropertyChanging();
					this._Interaction_Id = value;
					this.SendPropertyChanged("Interaction_Id");
					this.OnInteraction_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liked", DbType="Int")]
		public System.Nullable<int> Liked
		{
			get
			{
				return this._Liked;
			}
			set
			{
				if ((this._Liked != value))
				{
					this.OnLikedChanging(value);
					this.SendPropertyChanging();
					this._Liked = value;
					this.SendPropertyChanged("Liked");
					this.OnLikedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Play_Count", DbType="BigInt")]
		public System.Nullable<long> Play_Count
		{
			get
			{
				return this._Play_Count;
			}
			set
			{
				if ((this._Play_Count != value))
				{
					this.OnPlay_CountChanging(value);
					this.SendPropertyChanging();
					this._Play_Count = value;
					this.SendPropertyChanged("Play_Count");
					this.OnPlay_CountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int")]
		public System.Nullable<int> User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Id", DbType="Int")]
		public System.Nullable<int> Song_Id
		{
			get
			{
				return this._Song_Id;
			}
			set
			{
				if ((this._Song_Id != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSong_IdChanging(value);
					this.SendPropertyChanging();
					this._Song_Id = value;
					this.SendPropertyChanged("Song_Id");
					this.OnSong_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_Interaction", Storage="_Song", ThisKey="Song_Id", OtherKey="Song_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.Interactions.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.Interactions.Add(this);
						this._Song_Id = value.Song_Id;
					}
					else
					{
						this._Song_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Interaction", Storage="_User", ThisKey="User_Id", OtherKey="User_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Interactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Interactions.Add(this);
						this._User_Id = value.User_Id;
					}
					else
					{
						this._User_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Music_Genre")]
	public partial class Music_Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Genre_Id;
		
		private string _Genre_Name;
		
		private EntitySet<Song> _Songs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenre_IdChanging(int value);
    partial void OnGenre_IdChanged();
    partial void OnGenre_NameChanging(string value);
    partial void OnGenre_NameChanged();
    #endregion
		
		public Music_Genre()
		{
			this._Songs = new EntitySet<Song>(new Action<Song>(this.attach_Songs), new Action<Song>(this.detach_Songs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Genre_Id
		{
			get
			{
				return this._Genre_Id;
			}
			set
			{
				if ((this._Genre_Id != value))
				{
					this.OnGenre_IdChanging(value);
					this.SendPropertyChanging();
					this._Genre_Id = value;
					this.SendPropertyChanged("Genre_Id");
					this.OnGenre_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_Name", DbType="NVarChar(100)")]
		public string Genre_Name
		{
			get
			{
				return this._Genre_Name;
			}
			set
			{
				if ((this._Genre_Name != value))
				{
					this.OnGenre_NameChanging(value);
					this.SendPropertyChanging();
					this._Genre_Name = value;
					this.SendPropertyChanged("Genre_Name");
					this.OnGenre_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Music_Genre_Song", Storage="_Songs", ThisKey="Genre_Id", OtherKey="Genre_Id")]
		public EntitySet<Song> Songs
		{
			get
			{
				return this._Songs;
			}
			set
			{
				this._Songs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Music_Genre = this;
		}
		
		private void detach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Music_Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Playlist")]
	public partial class Playlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Playlist_Id;
		
		private string _Playlist_Name;
		
		private System.Nullable<System.DateTime> _Create_At;
		
		private System.Nullable<int> _User_Id;
		
		private EntitySet<Playlist_Song> _Playlist_Songs;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    partial void OnPlaylist_NameChanging(string value);
    partial void OnPlaylist_NameChanged();
    partial void OnCreate_AtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_AtChanged();
    partial void OnUser_IdChanging(System.Nullable<int> value);
    partial void OnUser_IdChanged();
    #endregion
		
		public Playlist()
		{
			this._Playlist_Songs = new EntitySet<Playlist_Song>(new Action<Playlist_Song>(this.attach_Playlist_Songs), new Action<Playlist_Song>(this.detach_Playlist_Songs));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Name", DbType="NVarChar(100)")]
		public string Playlist_Name
		{
			get
			{
				return this._Playlist_Name;
			}
			set
			{
				if ((this._Playlist_Name != value))
				{
					this.OnPlaylist_NameChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Name = value;
					this.SendPropertyChanged("Playlist_Name");
					this.OnPlaylist_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_At", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_At
		{
			get
			{
				return this._Create_At;
			}
			set
			{
				if ((this._Create_At != value))
				{
					this.OnCreate_AtChanging(value);
					this.SendPropertyChanging();
					this._Create_At = value;
					this.SendPropertyChanged("Create_At");
					this.OnCreate_AtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int")]
		public System.Nullable<int> User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_Playlist_Song", Storage="_Playlist_Songs", ThisKey="Playlist_Id", OtherKey="Playlist_Id")]
		public EntitySet<Playlist_Song> Playlist_Songs
		{
			get
			{
				return this._Playlist_Songs;
			}
			set
			{
				this._Playlist_Songs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Playlist", Storage="_User", ThisKey="User_Id", OtherKey="User_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Playlists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Playlists.Add(this);
						this._User_Id = value.User_Id;
					}
					else
					{
						this._User_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Playlist_Songs(Playlist_Song entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = this;
		}
		
		private void detach_Playlist_Songs(Playlist_Song entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Playlist_Song")]
	public partial class Playlist_Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Playlist_Id;
		
		private int _Song_Id;
		
		private EntityRef<Playlist> _Playlist;
		
		private EntityRef<Song> _Song;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    partial void OnSong_IdChanging(int value);
    partial void OnSong_IdChanged();
    #endregion
		
		public Playlist_Song()
		{
			this._Playlist = default(EntityRef<Playlist>);
			this._Song = default(EntityRef<Song>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					if (this._Playlist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Song_Id
		{
			get
			{
				return this._Song_Id;
			}
			set
			{
				if ((this._Song_Id != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSong_IdChanging(value);
					this.SendPropertyChanging();
					this._Song_Id = value;
					this.SendPropertyChanged("Song_Id");
					this.OnSong_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_Playlist_Song", Storage="_Playlist", ThisKey="Playlist_Id", OtherKey="Playlist_Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Playlist Playlist
		{
			get
			{
				return this._Playlist.Entity;
			}
			set
			{
				Playlist previousValue = this._Playlist.Entity;
				if (((previousValue != value) 
							|| (this._Playlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Playlist.Entity = null;
						previousValue.Playlist_Songs.Remove(this);
					}
					this._Playlist.Entity = value;
					if ((value != null))
					{
						value.Playlist_Songs.Add(this);
						this._Playlist_Id = value.Playlist_Id;
					}
					else
					{
						this._Playlist_Id = default(int);
					}
					this.SendPropertyChanged("Playlist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_Playlist_Song", Storage="_Song", ThisKey="Song_Id", OtherKey="Song_Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.Playlist_Songs.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.Playlist_Songs.Add(this);
						this._Song_Id = value.Song_Id;
					}
					else
					{
						this._Song_Id = default(int);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Song_Id;
		
		private System.Nullable<int> _Genre_Id;
		
		private System.Nullable<int> _Artist_Id;
		
		private System.Nullable<int> _Album_Id;
		
		private string _Song_Name;
		
		private string _Song_Path;
		
		private System.Data.Linq.Binary _Song_Data;
		
		private string _Lyrics;
		
		private System.Nullable<System.DateTime> _Create_at;
		
		private System.Data.Linq.Binary _Song_Image;
		
		private EntitySet<Interaction> _Interactions;
		
		private EntitySet<Playlist_Song> _Playlist_Songs;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<Music_Genre> _Music_Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSong_IdChanging(int value);
    partial void OnSong_IdChanged();
    partial void OnGenre_IdChanging(System.Nullable<int> value);
    partial void OnGenre_IdChanged();
    partial void OnArtist_IdChanging(System.Nullable<int> value);
    partial void OnArtist_IdChanged();
    partial void OnAlbum_IdChanging(System.Nullable<int> value);
    partial void OnAlbum_IdChanged();
    partial void OnSong_NameChanging(string value);
    partial void OnSong_NameChanged();
    partial void OnSong_PathChanging(string value);
    partial void OnSong_PathChanged();
    partial void OnSong_DataChanging(System.Data.Linq.Binary value);
    partial void OnSong_DataChanged();
    partial void OnLyricsChanging(string value);
    partial void OnLyricsChanged();
    partial void OnCreate_atChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_atChanged();
    partial void OnSong_ImageChanging(System.Data.Linq.Binary value);
    partial void OnSong_ImageChanged();
    #endregion
		
		public Song()
		{
			this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
			this._Playlist_Songs = new EntitySet<Playlist_Song>(new Action<Playlist_Song>(this.attach_Playlist_Songs), new Action<Playlist_Song>(this.detach_Playlist_Songs));
			this._Album = default(EntityRef<Album>);
			this._Artist = default(EntityRef<Artist>);
			this._Music_Genre = default(EntityRef<Music_Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Song_Id
		{
			get
			{
				return this._Song_Id;
			}
			set
			{
				if ((this._Song_Id != value))
				{
					this.OnSong_IdChanging(value);
					this.SendPropertyChanging();
					this._Song_Id = value;
					this.SendPropertyChanged("Song_Id");
					this.OnSong_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_Id", DbType="Int")]
		public System.Nullable<int> Genre_Id
		{
			get
			{
				return this._Genre_Id;
			}
			set
			{
				if ((this._Genre_Id != value))
				{
					if (this._Music_Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenre_IdChanging(value);
					this.SendPropertyChanging();
					this._Genre_Id = value;
					this.SendPropertyChanged("Genre_Id");
					this.OnGenre_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist_Id", DbType="Int")]
		public System.Nullable<int> Artist_Id
		{
			get
			{
				return this._Artist_Id;
			}
			set
			{
				if ((this._Artist_Id != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtist_IdChanging(value);
					this.SendPropertyChanging();
					this._Artist_Id = value;
					this.SendPropertyChanged("Artist_Id");
					this.OnArtist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Id", DbType="Int")]
		public System.Nullable<int> Album_Id
		{
			get
			{
				return this._Album_Id;
			}
			set
			{
				if ((this._Album_Id != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbum_IdChanging(value);
					this.SendPropertyChanging();
					this._Album_Id = value;
					this.SendPropertyChanged("Album_Id");
					this.OnAlbum_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Name", DbType="NVarChar(100)")]
		public string Song_Name
		{
			get
			{
				return this._Song_Name;
			}
			set
			{
				if ((this._Song_Name != value))
				{
					this.OnSong_NameChanging(value);
					this.SendPropertyChanging();
					this._Song_Name = value;
					this.SendPropertyChanged("Song_Name");
					this.OnSong_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Path", DbType="VarChar(MAX)")]
		public string Song_Path
		{
			get
			{
				return this._Song_Path;
			}
			set
			{
				if ((this._Song_Path != value))
				{
					this.OnSong_PathChanging(value);
					this.SendPropertyChanging();
					this._Song_Path = value;
					this.SendPropertyChanged("Song_Path");
					this.OnSong_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Song_Data
		{
			get
			{
				return this._Song_Data;
			}
			set
			{
				if ((this._Song_Data != value))
				{
					this.OnSong_DataChanging(value);
					this.SendPropertyChanging();
					this._Song_Data = value;
					this.SendPropertyChanged("Song_Data");
					this.OnSong_DataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lyrics", DbType="NVarChar(MAX)")]
		public string Lyrics
		{
			get
			{
				return this._Lyrics;
			}
			set
			{
				if ((this._Lyrics != value))
				{
					this.OnLyricsChanging(value);
					this.SendPropertyChanging();
					this._Lyrics = value;
					this.SendPropertyChanged("Lyrics");
					this.OnLyricsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_at
		{
			get
			{
				return this._Create_at;
			}
			set
			{
				if ((this._Create_at != value))
				{
					this.OnCreate_atChanging(value);
					this.SendPropertyChanging();
					this._Create_at = value;
					this.SendPropertyChanged("Create_at");
					this.OnCreate_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Image", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Song_Image
		{
			get
			{
				return this._Song_Image;
			}
			set
			{
				if ((this._Song_Image != value))
				{
					this.OnSong_ImageChanging(value);
					this.SendPropertyChanging();
					this._Song_Image = value;
					this.SendPropertyChanged("Song_Image");
					this.OnSong_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_Interaction", Storage="_Interactions", ThisKey="Song_Id", OtherKey="Song_Id")]
		public EntitySet<Interaction> Interactions
		{
			get
			{
				return this._Interactions;
			}
			set
			{
				this._Interactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_Playlist_Song", Storage="_Playlist_Songs", ThisKey="Song_Id", OtherKey="Song_Id")]
		public EntitySet<Playlist_Song> Playlist_Songs
		{
			get
			{
				return this._Playlist_Songs;
			}
			set
			{
				this._Playlist_Songs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Song", Storage="_Album", ThisKey="Album_Id", OtherKey="Album_Id", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.Songs.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.Songs.Add(this);
						this._Album_Id = value.Album_Id;
					}
					else
					{
						this._Album_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Song", Storage="_Artist", ThisKey="Artist_Id", OtherKey="Artist_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Songs.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Songs.Add(this);
						this._Artist_Id = value.Artist_Id;
					}
					else
					{
						this._Artist_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Music_Genre_Song", Storage="_Music_Genre", ThisKey="Genre_Id", OtherKey="Genre_Id", IsForeignKey=true)]
		public Music_Genre Music_Genre
		{
			get
			{
				return this._Music_Genre.Entity;
			}
			set
			{
				Music_Genre previousValue = this._Music_Genre.Entity;
				if (((previousValue != value) 
							|| (this._Music_Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Music_Genre.Entity = null;
						previousValue.Songs.Remove(this);
					}
					this._Music_Genre.Entity = value;
					if ((value != null))
					{
						value.Songs.Add(this);
						this._Genre_Id = value.Genre_Id;
					}
					else
					{
						this._Genre_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Music_Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
		
		private void attach_Playlist_Songs(Playlist_Song entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_Playlist_Songs(Playlist_Song entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private string _User_name;
		
		private string _Password;
		
		private string _E_mail;
		
		private EntitySet<Interaction> _Interactions;
		
		private EntitySet<Playlist> _Playlists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnUser_nameChanging(string value);
    partial void OnUser_nameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    #endregion
		
		public User()
		{
			this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
			this._Playlists = new EntitySet<Playlist>(new Action<Playlist>(this.attach_Playlists), new Action<Playlist>(this.detach_Playlists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_name", DbType="VarChar(100)")]
		public string User_name
		{
			get
			{
				return this._User_name;
			}
			set
			{
				if ((this._User_name != value))
				{
					this.OnUser_nameChanging(value);
					this.SendPropertyChanging();
					this._User_name = value;
					this.SendPropertyChanged("User_name");
					this.OnUser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_mail", DbType="VarChar(100)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Interaction", Storage="_Interactions", ThisKey="User_Id", OtherKey="User_Id")]
		public EntitySet<Interaction> Interactions
		{
			get
			{
				return this._Interactions;
			}
			set
			{
				this._Interactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Playlist", Storage="_Playlists", ThisKey="User_Id", OtherKey="User_Id")]
		public EntitySet<Playlist> Playlists
		{
			get
			{
				return this._Playlists;
			}
			set
			{
				this._Playlists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Playlists(Playlist entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Playlists(Playlist entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
